(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{501:function(n,s,a){"use strict";a.r(s);var e=a(14),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"_1-什么是迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是迭代器"}},[n._v("#")]),n._v(" 1. 什么是迭代器？")]),n._v(" "),s("p",[n._v("概念(维基百科)： "),s("strong",[n._v("迭代器")]),n._v("（iterator），是确使用户可在容器对象（container，例如链表或数组）上遍访的对象[1][2][3]，设计人员使用此接口无需关心容器对象的内存分配的实现细节。"),s("br"),n._v(" "),s("strong",[n._v("JS中的迭代器")])]),n._v(" "),s("ul",[s("li",[n._v("其本质就是一个对象，符合迭代器协议（iterator protocol）")]),n._v(" "),s("li",[n._v("迭代器协议\n"),s("ol",[s("li",[n._v("其对象返回一个next函数")]),n._v(" "),s("li",[n._v("调用next函数返回一个对象，其对象中包含两个属性\n"),s("ul",[s("li",[s("code",[n._v("done")]),n._v("(完成)，它的值为布尔类型，也就是"),s("code",[n._v("true/false")]),n._v("。\n"),s("ul",[s("li",[n._v("如果这个迭代器没有迭代完成即返回"),s("code",[n._v("{done:false}")])]),n._v(" "),s("li",[n._v("当这个迭代器完成了即返回"),s("code",[n._v("{done:true}")])])])]),n._v(" "),s("li",[s("code",[n._v("value")]),n._v("(值)，它可以返回js中的任何值，TS中表示可为:"),s("code",[n._v("value:any")]),n._v("类型")])])])])])]),n._v(" "),s("h3",{attrs:{id:"_1-1-迭代器的基本实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-迭代器的基本实现"}},[n._v("#")]),n._v(" 1.1 迭代器的基本实现")]),n._v(" "),s("p",[n._v("思考以下代码:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let index = 0\nconst bears = ['ice', 'panda', 'grizzly']\n\nlet iterator = {\n  next() {\n    if (index < bears.length) {\n      return { done: false, value: bears[index++] }\n    }\n\n    return { done: true, value: undefined }\n  }\n}\n\nconsole.log(iterator.next()) //{ done: false, value: 'ice' }\nconsole.log(iterator.next()) //{ done: false, value: 'panda' }\nconsole.log(iterator.next()) //{ done: false, value: 'grizzly' }\nconsole.log(iterator.next()) //{ done: true, value: undefined }\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br")])]),s("ol",[s("li",[n._v("是一个对象，实现了"),s("code",[n._v("next")]),n._v("方法，"),s("code",[n._v("next")]),n._v("方法返回了一个对象，有"),s("code",[n._v("done")]),n._v("属性和"),s("code",[n._v("value")]),n._v("属性，且"),s("code",[n._v("key")]),n._v("的值类型也为"),s("code",[n._v("boolean")]),n._v("或"),s("code",[n._v("any")]),n._v("，符合迭代器协议，是一个妥妥的迭代器没跑了。")]),n._v(" "),s("li",[n._v("弊端\n"),s("ul",[s("li",[n._v("违背了高内聚思想，明明"),s("code",[n._v("index")]),n._v("和"),s("code",[n._v("iterator")]),n._v("对象是属于一个整体，我却使用了全局变量，从V8引擎的GC，可达性(也就是标记清除)来看，如果"),s("code",[n._v("bears = null")]),n._v(" ，不手动设置为null很有可能会造成内存泄漏，并且内聚性低。")]),n._v(" "),s("li",[n._v("假如我要创建一百个迭代器对象呢？ 那我就自己定义一百遍吗？肯定错误的，我们要把它封装起来，这样内聚性又高，又能进行复用，一举两得，一石二鸟，真的是"),s("code",[n._v("very beautiful")]),n._v(","),s("code",[n._v("very 优雅。")])])])])]),n._v(" "),s("h3",{attrs:{id:"_1-2-迭代器的封装实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-迭代器的封装实现"}},[n._v("#")]),n._v(" 1.2 迭代器的封装实现")]),n._v(" "),s("p",[n._v("思考一下代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const bears = ['ice', 'panda', 'grizzly']\n\nfunction createArrIterator(arr) {\n  let index = 0\n\n  let _iterator = {\n    next() {\n      if (index < arr.length) {\n        return { done: false, value: arr[index++] }\n      }\n\n      return { done: true, value: undefined }\n    }\n  }\n\n  return _iterator\n}\n\nlet iter = createArrIterator(bears)\n\nconsole.log(iter.next())\nconsole.log(iter.next())\nconsole.log(iter.next())\nconsole.log(iter.next())\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("ul",[s("li",[n._v("内聚性非常高，尽最大可能进行了复用，减少冗余代码")])]),n._v(" "),s("h2",{attrs:{id:"_2-什么是可迭代对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是可迭代对象"}},[n._v("#")]),n._v(" 2. 什么是可迭代对象")]),n._v(" "),s("p",[n._v("迭代器对象和可迭代对象是一个不同的东西，虽然它们存在关联，而且面试的时候经常面这些概念，废话不多说，我们直接进入主题。")]),n._v(" "),s("ul",[s("li",[n._v("首先就是一个对象，且符合可迭代对象协议(iterable protocol)")]),n._v(" "),s("li",[n._v("可迭代对象协议\n"),s("ol",[s("li",[n._v("实现了[Symbol.iterator]为key的方法，且这个方法返回了一个迭代器对象")])])]),n._v(" "),s("li",[n._v("绕了一大圈终于把概念搞明白了，那可迭代对象有什么好处呢？ 有什么应用场景呢？\n"),s("ol",[s("li",[n._v("for of 的时候，其本质就是调用的这个函数，也就是[Symbol.iterator]为key的方法")])])])]),n._v(" "),s("h3",{attrs:{id:"_2-1-原生可迭代对象-js内置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-原生可迭代对象-js内置"}},[n._v("#")]),n._v(" 2.1 原生可迭代对象(JS内置)")]),n._v(" "),s("ol",[s("li",[n._v("String")]),n._v(" "),s("li",[n._v("Array")]),n._v(" "),s("li",[n._v("Set")]),n._v(" "),s("li",[n._v("NodeList 类数组对象")]),n._v(" "),s("li",[n._v("Arguments 类数组对象")]),n._v(" "),s("li",[n._v("Map")])]),n._v(" "),s("h4",{attrs:{id:"_2-1-1-部分for-of-演示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-部分for-of-演示"}},[n._v("#")]),n._v(" 2.1.1 部分for of 演示")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let str = 'The Three Bears'\n\nconst bears = ['ice', 'panda', 'grizzly']\n\nfor( let text of str) {\n  console.log(text) //字符串每个遍历打印\n}\n\nfor( let bear of bears) {\n  console.log(bear)\n}\n\n //ice panda grizzly\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("h4",{attrs:{id:"_2-1-2-查看内置的-symbol-iterator-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-查看内置的-symbol-iterator-方法"}},[n._v("#")]),n._v(" 2.1.2 查看内置的[Symbol.iterator]方法")]),n._v(" "),s("ul",[s("li",[n._v("上面给大家举例了很多可迭代对象，那它们必定是符合可迭代对象协议的，思考以下代码")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const bears = ['ice', 'panda', 'grizzly']\n//数组的Symbol.iterator方法\nconst iter = bears[Symbol.iterator]()\n\nconsole.log(iter.next())\nconsole.log(iter.next())\nconsole.log(iter.next())\nconsole.log(iter.next())\n\nconst nickName = 'ice'\n//字符串的Symbol.iterator方法\nconst strIter = nickName[Symbol.iterator]()\n\nconsole.log(strIter.next())\nconsole.log(strIter.next())\nconsole.log(strIter.next())\nconsole.log(strIter.next())\n\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])]),s("h3",{attrs:{id:"_2-2-可迭代对象的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-可迭代对象的实现"}},[n._v("#")]),n._v(" 2.2 可迭代对象的实现")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let info = {\n  bears: ['ice', 'panda', 'grizzly'],\n  [Symbol.iterator]: function() {\n    let index = 0\n    let _iterator = {\n       //这里一定要箭头函数，或者手动保存上层作用域的this\n       next: () => {\n        if (index < this.bears.length) {\n          return { done: false, value: this.bears[index++] }\n        }\n  \n        return { done: true, value: undefined }\n      }\n    }\n\n    return _iterator\n  }\n}\n\nlet iter = info[Symbol.iterator]()\nconsole.log(iter.next())\nconsole.log(iter.next())\nconsole.log(iter.next())\nconsole.log(iter.next())\n\n//符合可迭代对象协议 就可以利用 for of 遍历\nfor (let bear of info) {\n  console.log(bear)\n}\n//ice panda grizzly\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br")])]),s("ul",[s("li",[n._v("符合可迭代对象协议，是一个对象，有"),s("code",[n._v("[Symbol.iterator]")]),n._v("方法，并且这个方法返回了一个迭代器对象。")]),n._v(" "),s("li",[n._v("当我利用for of 遍历，就会自动的调用这个方法。")])]),n._v(" "),s("h3",{attrs:{id:"_2-3-可迭代对象的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-可迭代对象的应用"}},[n._v("#")]),n._v(" 2.3 可迭代对象的应用")]),n._v(" "),s("ul",[s("li",[n._v("for of")]),n._v(" "),s("li",[n._v("展开语法")]),n._v(" "),s("li",[n._v("解构语法")]),n._v(" "),s("li",[n._v("promise.all(iterable)")]),n._v(" "),s("li",[n._v("promise.race(iterable)")]),n._v(" "),s("li",[n._v("Array.from(iterable)")]),n._v(" "),s("li",[n._v("...")])]),n._v(" "),s("h3",{attrs:{id:"_2-4-自定义类迭代实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-自定义类迭代实现"}},[n._v("#")]),n._v(" 2.4 自定义类迭代实现")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class myInfo {\n  constructor(name, age, friends) {\n    this.name = name\n    this.age = age\n    this.friends = friends\n  }\n\n  [Symbol.iterator]() {\n    let index = 0\n\n    let _iterator = {\n      next: () => {\n        const friends = this.friends\n        if (index < friends.length) {\n          return {done: false, value: friends[index++]}\n        }\n\n        return {done: true, value: undefined}\n      }\n    }\n\n    return _iterator\n  }\n}\n\nconst info = new myInfo('ice', 22, ['panda','grizzly'])\n\nfor (let bear of info) {\n  console.log(bear)\n}\n\n//panda\n//grizzly\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br")])]),s("ul",[s("li",[n._v("此案例只是简单的对"),s("code",[n._v("friends")]),n._v("进行了迭代，你也可以迭代你想要的一切东西...")]),n._v(" "),s("li",[n._v("记住此案例，后续我们会对这个案例进行重构，优雅的会让你不能用言语来形容。")])]),n._v(" "),s("h2",{attrs:{id:"_3-生成器函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-生成器函数"}},[n._v("#")]),n._v(" 3. 生成器函数")]),n._v(" "),s("p",[n._v("生成器是ES6新增的一种可以对函数控制的方案，能灵活的控制函数的暂停执行，继续执行等。")]),n._v(" "),s("p",[s("strong",[n._v("生成器函数和普通函数的不同")])]),n._v(" "),s("ul",[s("li",[n._v("定义: 普通函数"),s("code",[n._v("function")]),n._v("定义，生成器函数"),s("code",[n._v("function*")]),n._v("，要在后面加"),s("code",[n._v("*")])]),n._v(" "),s("li",[n._v("生成器函数可以通过 "),s("code",[n._v("yield")]),n._v(" 来控制函数的执行")]),n._v(" "),s("li",[n._v("生成器函数返回一个生成器(generator)，"),s("strong",[n._v("生成器是一个特殊的迭代器")])])]),n._v(" "),s("h3",{attrs:{id:"_3-1-生成器函数基本实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-生成器函数基本实现"}},[n._v("#")]),n._v(" 3.1 生成器函数基本实现")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function* bar() {\n  console.log('fn run')\n}\n\nbar()\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("ul",[s("li",[n._v("我们会发现，这个函数竟然没有执行。我们前面说过，它是一个生成器函数，它的返回值是一个生成器，"),s("strong",[n._v("同时也是一个特殊的迭代器")]),n._v("，所以跟普通函数相比，好像暂停了，那如何让他执行呢？接下来我们进一步探讨。")])]),n._v(" "),s("h3",{attrs:{id:"_3-2-生成器函数单次执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-生成器函数单次执行"}},[n._v("#")]),n._v(" 3.2 生成器函数单次执行")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function* bar() {\n  console.log('fn run')\n}\n\nconst generator = bar()\n\nconsole.log(generator.next())\n//fn run\n//{ value: undefined, done: true }\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("ul",[s("li",[n._v("返回了一个生成器，我们调用next方法就可以让函数执行，并且next方法是有返回值的，我们上面讲迭代器的时候有探讨过，而value没有返回值那就是undefined。那上面说的yield关键字在哪，到底是如何控制函数的呢？是如何用的呢？")])]),n._v(" "),s("h3",{attrs:{id:"_3-3-生成器函数多次执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-生成器函数多次执行"}},[n._v("#")]),n._v(" 3.3 生成器函数多次执行")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function* bar() {\n  console.log('fn run start')\n  yield 100\n  console.log('fn run...')\n  yield 200\n  console.log('fn run end')\n  return 300\n}\n\nconst generator = bar()\n\n//1. 执行到第一个yield，暂停之后，并且把yield的返回值 传入到value中\nconsole.log(generator.next())\n//2. 执行到第一个yield，暂停之后，并且把yield的返回值 传入到value中\nconsole.log(generator.next())\n//3. 执行剩余代码\nconsole.log(generator.next())\n\n//打印结果:\n//fn run start\n//{done:false, value: 100}\n//fn run...\n//{done:false, value: 200}\n//fn run end\n//{done:true, value: 300}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br")])]),s("ul",[s("li",[n._v("现在我们恍然大悟，每当调用next方法的时候，代码就会开始执行，执行到"),s("code",[n._v("yield x")]),n._v("，后就会暂停，等待下一次调用next继续往下执行，周而复始，没有了"),s("code",[n._v("yield")]),n._v("关键字，进行最后一次next调用返回"),s("code",[n._v("done:true")]),n._v("。")])]),n._v(" "),s("h3",{attrs:{id:"_3-4-生成器函数的分段传参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-生成器函数的分段传参"}},[n._v("#")]),n._v(" 3.4 生成器函数的分段传参")]),n._v(" "),s("p",[n._v("我有一个需求，既然生成器能控制函数分段执行，我要你实现一个分段传参。"),s("br"),n._v("\n思考以下代码:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("\nfunction* bar(nickName) {\n  const str1 = yield nickName\n  const str2 = yield str1 + nickName\n\n  return str2 + str1 + nickName\n}\n\nconst generator = bar('ice')\n\nconsole.log(generator.next())\nconsole.log(generator.next('panda '))\nconsole.log(generator.next('grizzly '))\nconsole.log(generator.next())\n\n// { value: 'ice', done: false }\n// { value: 'panda ice', done: false }\n// { value: 'grizzly panda ice', done: true }\n// { value: undefined, done: true }\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("ul",[s("li",[n._v("如果没有接触过这样的代码会比较奇怪\n"),s("ul",[s("li",[n._v("当我调用next函数的时候，yield的左侧是可以接受参数的，也并不是所有的next方法的实参都能传递到生成器函数内部")]),n._v(" "),s("li",[n._v("yield左侧接收的，是第二次调用next传入的实参，那第一次传入的就没有yield关键字接收，所有只有当我调用bar函数的时候传入。")]),n._v(" "),s("li",[n._v("最后一次next调用，传入的参数我也调用不了，因为没有yield关键字可以接收了。")])])]),n._v(" "),s("li",[n._v("很多开发者会疑惑，这样写有什么用呢？ 可读性还差，但是在处理异步数据的时候就非常有用了，后续会在promise中文章中介绍。")])]),n._v(" "),s("h3",{attrs:{id:"_3-5-生成器代替迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-生成器代替迭代器"}},[n._v("#")]),n._v(" 3.5 生成器代替迭代器")]),n._v(" "),s("p",[n._v("前面我们讲到，"),s("strong",[n._v("生成器是一个特殊的迭代器")]),n._v("，那生成器必定是可以代替迭代器对象的，思考以下代码。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let bears = ['ice','panda','grizzly']\n\nfunction* createArrIterator(bears) {\n  for (let bear of bears) {\n    yield bear\n  }\n}\n\nconst generator = createArrIterator(bears)\n\nconsole.log(generator.next())\nconsole.log(generator.next())\nconsole.log(generator.next())\nconsole.log(generator.next())\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("其实这里还有一种"),s("strong",[n._v("语法糖")]),n._v("的写法"),s("strong",[n._v("yield")]),n._v("*")]),n._v(" "),s("ul",[s("li",[n._v("yield* 依次迭代这个可迭代对象，相当于遍历拿出每一项 yield item(伪代码)")])]),n._v(" "),s("p",[n._v("思考以下代码:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let bears = ['ice','panda','grizzly']\n\nfunction* createArrIterator(bears) {\n  yield* bears\n}\n\nconst generator = createArrIterator(bears)\n\nconsole.log(generator.next())\nconsole.log(generator.next())\nconsole.log(generator.next())\nconsole.log(generator.next())\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("ul",[s("li",[n._v("依次迭代这个可迭代对象，返回每个item值")])]),n._v(" "),s("h2",{attrs:{id:"_4-可迭代对象的终极封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-可迭代对象的终极封装"}},[n._v("#")]),n._v(" 4. 可迭代对象的终极封装")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class myInfo {\n  constructor(name, age, friends) {\n    this.name = name\n    this.age = age\n    this.friends = friends\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.friends\n  }\n}\n\nconst info = new myInfo('ice', 22, ['panda','grizzly'])\n\nfor (let bear of info) {\n  console.log(bear)\n}\n\n//panda\n//grizzly\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("ul",[s("li",[n._v("回顾以下可迭代对象协议\n"),s("ul",[s("li",[n._v("是一个对象并且有[Symbol.iterator]方法")]),n._v(" "),s("li",[n._v("这个方法返回一个迭代器对象 生成器函数返回一个生成器，是一个特殊的"),s("strong",[n._v("迭代器")])])])])]),n._v(" "),s("h2",{attrs:{id:"_5-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-总结"}},[n._v("#")]),n._v(" 5. 总结")]),n._v(" "),s("h3",{attrs:{id:"_5-1-迭代器对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-迭代器对象"}},[n._v("#")]),n._v(" 5.1 迭代器对象")]),n._v(" "),s("ol",[s("li",[n._v("本质就是一个对象，要符合迭代器协议")]),n._v(" "),s("li",[n._v("有自己对应的next方法，next方法则返回一组数据"),s("code",[n._v("{done:boolean, value:any}")])])]),n._v(" "),s("h3",{attrs:{id:"_5-2-可迭代对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-可迭代对象"}},[n._v("#")]),n._v(" 5.2 可迭代对象")]),n._v(" "),s("ol",[s("li",[n._v("本质就是对象，要符合可迭代对象协议")]),n._v(" "),s("li",[n._v("有"),s("code",[n._v("[Symbol.iterator]")]),n._v("方法，并且调用这个方法返回一个迭代器")])]),n._v(" "),s("h3",{attrs:{id:"_5-3-生成器函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-生成器函数"}},[n._v("#")]),n._v(" 5.3 生成器函数")]),n._v(" "),s("ol",[s("li",[n._v("可以控制函数的暂停执行和继续执行")]),n._v(" "),s("li",[n._v("通过"),s("code",[n._v("function* bar() {}")]),n._v(" 这种形式定义")]),n._v(" "),s("li",[n._v("不会立马执行，而是返回一个生成器，"),s("strong",[n._v("生成器是一个特殊的迭代器对象")])]),n._v(" "),s("li",[s("code",[n._v("yield")]),n._v(" 关键字可以控制函数分段执行")]),n._v(" "),s("li",[n._v("调用返回生成器的next方法进行执行")])]),n._v(" "),s("h2",{attrs:{id:"_6-结语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-结语"}},[n._v("#")]),n._v(" 6. 结语")]),n._v(" "),s("ul",[s("li",[n._v("坚持自律简单二字，却贯穿了我的前半生，我希望我能坚持做一件事，每天都能有所进步。")])]),n._v(" "),s("p",[n._v("本文转自 "),s("a",{attrs:{href:"https://juejin.cn/post/7141685685940912136",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://juejin.cn/post/7141685685940912136"),s("OutboundLink")],1),n._v("，如有侵权，请联系删除。")])])}),[],!1,null,null,null);s.default=t.exports}}]);