(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{452:function(s,a,n){s.exports=n.p+"assets/img/format,png.402ecf13.png"},453:function(s,a,n){s.exports=n.p+"assets/img/format,png-1732150734313-3.6eeb7fc4.png"},454:function(s,a,n){s.exports=n.p+"assets/img/format,png-1732150737802-6.d258e05d.png"},578:function(s,a,n){"use strict";n.r(a);var e=n(14),t=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"一、什么是java反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是java反射"}},[s._v("#")]),s._v(" 一、什么是java反射？")]),s._v(" "),a("p",[s._v("在java的面向对象编程过程中，通常我们需要先知道一个Class类，然后"),a("code",[s._v("new 类名()")]),s._v("方式来获取该类的对象。也就是说我们需要在写代码的时候（编译期或者编译期之前）就知道我们要实例化哪一个类，运行哪一个方法，这种通常被称为**「静态的类加载」**。")]),s._v(" "),a("p",[s._v("但是在有些场景下，我们事先是不知道我们的代码的具体行为的。比如，我们定义一个服务任务工作流，每一个服务任务都是对应的一个类的一个方法。")]),s._v(" "),a("p",[a("img",{attrs:{src:n(452),alt:"图片"}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("服务任务B执行哪一个类的哪一个方法，是由服务任务A的执行结果决定的")])]),s._v(" "),a("li",[a("p",[s._v("服务任务C执行哪一个类的哪一个方法，是由服务任务A和B的执行结果决定的")])]),s._v(" "),a("li",[a("p",[s._v("并且用户不希望服务任务的功能在代码中写死，希望通过配置的方式执行不同的程序")])])]),s._v(" "),a("p",[s._v("面对这个情况，我们就不能用代码"),a("code",[s._v("new 类名()")]),s._v("来实现了，因为你不知道用户具体要怎么做配置，这一秒他希望服务任务A执行Xxxx类的x方法，下一秒他可能希望执行Yyyy类的y方法。当然你也可以说提需求嘛，用户改一次需求，我改一次代码。这种方式也能需求，但对于用户和程序员个人而言都是痛苦，那么有没有一种方法**「在运行期动态的改变程序的调用行为的方法」"),a("strong",[s._v("呢？这就是要为大家介绍的“")]),s._v("「java反射机制」**”。")]),s._v(" "),a("p",[s._v("那么java的反射机制能够做那些事呢？大概是这样几种：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在程序运行期动态的根据"),a("code",[s._v("package名.类名")]),s._v("实例化类对象")])]),s._v(" "),a("li",[a("p",[s._v("在程序运行期动态获取类对象的信息，包括对象的成本变量和方法")])]),s._v(" "),a("li",[a("p",[s._v("在程序运行期动态使用对象的成员变量属性")])]),s._v(" "),a("li",[a("p",[s._v("在程序运行期动态调用对象的方法（私有方法也可以调用）")])])]),s._v(" "),a("h2",{attrs:{id:"二、hello-world"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、hello-world"}},[s._v("#")]),s._v(" 二、Hello World")]),s._v(" "),a("p",[s._v("我们定义一个类叫做Student")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package com.zimug.java.reflection;\n\npublic class Student {\n    public String nickName;\n    private Integer age;\n\n    public void dinner(){\n        System.out.println("吃晚餐！");\n    }\n\n    private void sleep(int minutes){\n        System.out.println("睡" + minutes + "分钟");\n    }\n}\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("如果不用反射的方式，我相信只要学过java的朋友肯定会调用dinner方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Student student = new Student();\nstudent.dinner();\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("如果是反射的方式我们该怎么调用呢？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//获取Student类信息\nClass cls = Class.forName("com.zimug.java.reflection.Student");\n//对象实例化\nObject obj = cls.getDeclaredConstructor().newInstance();\n//根据方法名获取并执行方法\nMethod dinnerMethod = cls.getDeclaredMethod("dinner");\ndinnerMethod.invoke(obj);  //打印：吃晚餐！\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("通过上面的代码我们看到，com.zimug.java.reflection.Student类名和dinner方法名是字符串。既然是字符串我们就可以通过配置文件，或数据库、或什么其他的灵活配置方法来执行这段程序了。这就是反射最基础的使用方式。")]),s._v(" "),a("h2",{attrs:{id:"三、类加载与反射关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、类加载与反射关系"}},[s._v("#")]),s._v(" 三、类加载与反射关系")]),s._v(" "),a("p",[s._v("java的类加载机制还是挺复杂的，我们这里为了不混淆重点，只为大家介绍和“反射”有关系的一部分内容。")]),s._v(" "),a("p",[s._v("java执行编译的时候将java文件编译成字节码class文件,类加载器在类加载阶段将class文件加载到内存，并实例化一个java.lang.Class的对象。比如：对于Student类在加载阶段")]),s._v(" "),a("p",[a("img",{attrs:{src:n(453),alt:"图片"}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在内存(方法区或叫代码区)中实例化一个Class对象，注意是Class对象不是Student对象")])]),s._v(" "),a("li",[a("p",[s._v("一个Class类（字节码文件）对应一个Class对象")])]),s._v(" "),a("li",[a("p",[s._v("该Class对象保存了Student类的基础信息，比如这个Student类有几个字段（Filed）？有几个构造方法（Constructor）？有几个方法（Method）？有哪些注解（Annotation）？等信息。")])])]),s._v(" "),a("p",[s._v("有了上面的关于Student类的基本信息对象（java.lang.Class对象）,在运行期就可以根据这些信息来实例化Student类的对象。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在运行期你可以直接new一个Student对象")])]),s._v(" "),a("li",[a("p",[s._v("也可以使用反射的方法构造一个Student对象")])])]),s._v(" "),a("p",[a("img",{attrs:{src:n(454),alt:"图片"}})]),s._v(" "),a("p",[s._v("但是无论你new多少个Student对象，不论你反射构建多少个Student对象，保存Student类信息的java.lang.Class对象都只有一个。下面的代码可以证明。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Class cls = Class.forName("com.zimug.java.reflection.Student");\nClass cls2 = new Student().getClass();\n\nSystem.out.println(cls == cls2); //比较Class对象的地址，输出结果是true\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"四、操作反射的java类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、操作反射的java类"}},[s._v("#")]),s._v(" 四、操作反射的java类")]),s._v(" "),a("p",[s._v("了解了上面的这些基础信息，我们就可以更深入学习反射类相关的类和方法了：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("java.lang.Class:  代表一个类")])]),s._v(" "),a("li",[a("p",[s._v("java.lang.reflect.Constructor: 代表类的构造方法")])]),s._v(" "),a("li",[a("p",[s._v("java.lang.reflect.Method: 代表类的普通方法")])]),s._v(" "),a("li",[a("p",[s._v("java.lang.reflect.Field: 代表类的成员变量")])]),s._v(" "),a("li",[a("p",[s._v("Java.lang.reflect.Modifier:  修饰符，方法的修饰符，成员变量的修饰符。")])]),s._v(" "),a("li",[a("p",[s._v("java.lang.annotation.Annotation：在类、成员变量、构造方法、普通方法上都可以加注解")])])]),s._v(" "),a("h3",{attrs:{id:"_4-1-获取class对象的三种方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-获取class对象的三种方法"}},[s._v("#")]),s._v(" 4.1.获取Class对象的三种方法")]),s._v(" "),a("h4",{attrs:{id:"「class-forname-方法获取class对象」"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#「class-forname-方法获取class对象」"}},[s._v("#")]),s._v(" "),a("strong",[s._v("「"),a("code",[s._v("Class.forName()")]),s._v("方法获取Class对象」")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('/**\n* Class.forName方法获取Class对象，这也是反射中最常用的获取对象的方法，因为字符串传参增强了配置实现的灵活性\n*/\nClass cls = Class.forName("com.zimug.java.reflection.Student");\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"「类名-class获取class对象」"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#「类名-class获取class对象」"}},[s._v("#")]),s._v(" "),a("strong",[s._v("「"),a("code",[s._v("类名.class")]),s._v("获取Class对象」")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n* `类名.class`的方式获取Class对象\n*/\nClass clz = User.class;\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"「类对象-getclass-方式获取class对象」"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#「类对象-getclass-方式获取class对象」"}},[s._v("#")]),s._v(" "),a("strong",[s._v("「"),a("code",[s._v("类对象.getClass()")]),s._v("方式获取Class对象」")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n* `类对象.getClass()`方式获取Class对象\n*/\nUser user = new User();\nClass clazz = user.getClass();\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("虽然有三种方法可以获取某个类的Class对象，但是只有第一种可以被称为“反射”。")]),s._v(" "),a("h3",{attrs:{id:"_4-2-获取class类对象的基本信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-获取class类对象的基本信息"}},[s._v("#")]),s._v(" 4.2.获取Class类对象的基本信息")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Class cls = Class.forName("com.zimug.java.reflection.Student");\n\n//获取类的包名+类名\nSystem.out.println(cls.getName());          //com.zimug.java.reflection.Student\n//获取类的父类\nClass cls = Class.forName("com.zimug.java.reflection.Student");\n//这个类型是不是一个注解？\nSystem.out.println(cls.isAnnotation());     //false\n//这个类型是不是一个枚举？\nSystem.out.println(cls.isEnum());      //false\n//这个类型是不是基础数据类型？\nSystem.out.println(cls.isPrimitive()); //false\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("Class类对象信息中几乎包括了所有的你想知道的关于这个类型定义的信息，更多的方法就不一一列举了。还可以通过下面的方法")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("获取Class类对象代表的类实现了哪些接口：getInterfaces()")])]),s._v(" "),a("li",[a("p",[s._v("获取Class类对象代表的类使用了哪些注解：getAnnotations()")])])]),s._v(" "),a("h3",{attrs:{id:"_4-3-获得class对象的成员变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-获得class对象的成员变量"}},[s._v("#")]),s._v(" 4.3. 获得Class对象的成员变量")]),s._v(" "),a("p",[s._v("结合上文中的Student类的定义理解下面的代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Class cls = Class.forName("com.zimug.java.reflection.Student");\n\nField[] fields = cls.getFields();\nfor (Field field : fields) {\nSystem.out.println(field.getName());      //nickName\n}\n\nfields = cls.getDeclaredFields();\nfor (Field field : fields) {\nSystem.out.println(field.getName());      //nickName 换行  age\n}\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("getFields()方法获取类的非私有的成员变量，数组，包含从父类继承的成员变量")])]),s._v(" "),a("li",[a("p",[s._v("getDeclaredFields方法获取所有的成员变量，数组，但是不包含从父类继承而来的成员变量")])])]),s._v(" "),a("h3",{attrs:{id:"_4-4-获取class对象的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-获取class对象的方法"}},[s._v("#")]),s._v(" 4.4.获取Class对象的方法")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("getMethods() :  获取Class对象代表的类的所有的非私有方法，数组，"),a("strong",[s._v("「包含从父类继承而来的方法」")])])]),s._v(" "),a("li",[a("p",[s._v("getDeclaredMethods() :  获取Class对象代表的类定义的所有的方法，数组，"),a("strong",[s._v("「但是不包含从父类继承而来的方法」")])])]),s._v(" "),a("li",[a("p",[s._v("getMethod(methodName): 获取Class对象代表的类的指定方法名的非私有方法")])]),s._v(" "),a("li",[a("p",[s._v("getDeclaredMethod(methodName): 获取Class对象代表的类的指定方法名的方法")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('        Class cls = Class.forName("com.zimug.java.reflection.Student");\n\n        Method[] methods = cls.getMethods();\n        System.out.println("Student对象的非私有方法");\n        for (Method m : methods) {\n            System.out.print(m.getName() + ",");\n        }\n        System.out.println("  end");\n\n        Method[] allMethods = cls.getDeclaredMethods();\n        System.out.println("Student对象的所有方法");\n        for (Method m : allMethods) {\n            System.out.print(m.getName() + ",");\n        }\n        System.out.println("  end");\n\n        Method dinnerMethod = cls.getMethod("dinner");\n        System.out.println("dinner方法的参数个数" + dinnerMethod.getParameterCount());\n\n        Method sleepMethod = cls.getDeclaredMethod("sleep",int.class);\n        System.out.println("sleep方法的参数个数" + sleepMethod.getParameterCount());\n        System.out.println("sleep方法的参数对象数组" + Arrays.toString(sleepMethod.getParameters()));\n        System.out.println("sleep方法的参数返回值类型" + sleepMethod.getReturnType());\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("上面代码的执行结果如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Student对象的非私有方法\ndinner,wait,wait,wait,equals,toString,hashCode,getClass,notify,notifyAll,  end\n\nStudent对象的所有方法\ndinner,sleep,  end\n\ndinner方法的参数个数0\nsleep方法的参数个数1\nsleep方法的参数对象数组[int arg0]\nsleep方法的参数返回值类型void\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("可以看到getMethods获取的方法中包含Object父类中定义的方法，但是不包含本类中定义的私有方法sleep。另外我们还可以获取方法的参数及返回值信息：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("获取参数相关的属性：")])]),s._v(" "),a("li",[a("p",[s._v("获取方法参数个数：getParameterCount()")])]),s._v(" "),a("li",[a("p",[s._v("获取方法参数数组对象：getParameters() ，返回值是java.lang.reflect.Parameter数组")])]),s._v(" "),a("li",[a("p",[s._v("获取返回值相关的属性")])]),s._v(" "),a("li",[a("p",[s._v("获取方法返回值的数据类型：getReturnType()")])])]),s._v(" "),a("h3",{attrs:{id:"_4-5-方法的调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-方法的调用"}},[s._v("#")]),s._v(" 4.5.方法的调用")]),s._v(" "),a("p",[s._v("实际在上文中已经演示了方法的调用，如下invoke调用dinner方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Method dinnerMethod = cls.getDeclaredMethod("dinner");\ndinnerMethod.invoke(obj);  //打印：吃晚餐！\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("dinner方法是无参的那么有参数的方法怎么调用?看看invoke方法定义，第一个参数是Method对象，无论后面 "),a("code",[s._v("Object... args")]),s._v("有多少参数就按照方法定义依次传参就可以了。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public Object invoke(Object obj, Object... args)\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_4-6-创建类的对象-实例化对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-创建类的对象-实例化对象"}},[s._v("#")]),s._v(" 4.6.创建类的对象(实例化对象)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//获取Student类信息\nClass cls = Class.forName("com.zimug.java.reflection.Student");\n//对象实例化\nStudent student = (Student)cls.getDeclaredConstructor().newInstance();\n//下面的这种方法是已经Deprecated了，不建议使用。但是在比较旧的JDK版本中仍然是唯一的方式。\n//Student student = (Student)cls.newInstance();\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"五、反射的常用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、反射的常用场景"}},[s._v("#")]),s._v(" 五、反射的常用场景")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("通过配置信息调用类的方法")])]),s._v(" "),a("li",[a("p",[s._v("结合注解实现特殊功能")])]),s._v(" "),a("li",[a("p",[s._v("按需加载jar包或class")])])]),s._v(" "),a("h3",{attrs:{id:"_5-1-通过配置信息调用类的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-通过配置信息调用类的方法"}},[s._v("#")]),s._v(" 5.1. 通过配置信息调用类的方法")]),s._v(" "),a("p",[s._v("将上文的hello world中的代码封装一下，你知道类名className和方法名methodName是不是就可以调用方法了？至于你将className和 methodName配置到文件，还是nacos，还是数据库，自己决定吧！")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public void invokeClassMethod(String className,String methodName) throws ClassNotFoundException, \n            NoSuchMethodException, \n            InvocationTargetException, \n            InstantiationException, \n            IllegalAccessException {\n        //获取类信息\n        Class cls = Class.forName(className);\n        //对象实例化\n        Object obj = cls.getDeclaredConstructor().newInstance();\n        //根据方法名获取并执行方法\n        Method dinnerMethod = cls.getDeclaredMethod(methodName);\n        dinnerMethod.invoke(obj);\n}\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h3",{attrs:{id:"_5-2-结合注解实现特殊功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-结合注解实现特殊功能"}},[s._v("#")]),s._v(" 5.2.结合注解实现特殊功能")]),s._v(" "),a("p",[s._v("大家如果学习过mybatis plus都应该学习过这样的一个注解TableName，这个注解表示当前的实例类Student对应的数据库中的哪一张表。如下问代码所示，Student所示该类对应的是t_student这张表。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@TableName("t_student")\npublic class Student {\n    public String nickName;\n    private Integer age;\n}\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("下面我们自定义TableName这个注解")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@Target(ElementType.TYPE)  //表示TableName可作用于类、接口或enum Class, 或interface\n@Retention(RetentionPolicy.RUNTIME) //表示运行时由JVM加载\npublic @interface TableName {\n       String value() ;   //则使用@TableName注解的时候： @TableName(”t_student”);\n}\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("有了这个注解，我们就可以扫描某个路径下的java文件，至于类注解的扫描我们就不用自己开发了，引入下面的maven坐标就可以")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependency>\n    <groupId>org.reflections</groupId>\n    <artifactId>reflections</artifactId>\n    <version>0.9.10</version>\n</dependency>\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("看下面代码：先扫描包，从包中获取标注了TableName注解的类，再对该类打印注解value信息")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 要扫描的包\nString packageName = "com.zimug.java.reflection";\nReflections f = new Reflections(packageName);\n// 获取扫描到的标记注解的集合\nSet<Class<?>> set = f.getTypesAnnotatedWith(TableName.class);\nfor (Class<?> c : set) {\n// 循环获取标记的注解\nTableName annotation = c.getAnnotation(TableName.class);\n// 打印注解中的内容\nSystem.out.println(c.getName() + "类，TableName注解value=" + annotation.value());\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("输出结果是：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("com.zimug.java.reflection.Student类，TableName注解value=t_student\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("有的朋友会问这有什么用？这有大用处了。有了类定义与数据库表的对应关系，你还能通过反射获取类的成员变量，之后你是不是就可以根据表明t_student和字段名nickName，age构建增删改查的SQL了？全都构建完毕，是不是就是一个基础得Mybatis plus了？")]),s._v(" "),a("p",[s._v("反射和注解结合使用，可以演化出许许多多的应用场景，特别是在架构优化方面，等待你去发觉啊！")]),s._v(" "),a("h3",{attrs:{id:"_5-3-按需加载jar包或class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-按需加载jar包或class"}},[s._v("#")]),s._v(" 5.3.按需加载jar包或class")]),s._v(" "),a("p",[s._v("在某些场景下，我们可能不希望JVM的加载器一次性的把所有的jar包装载到JVM虚拟机中，因为这样会影响项目的启动和初始化效率，并且占用较多的内存。我们希望按需加载，需要用到哪些jar，按照程序动态运行的需求取加载这些jar。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//按路径加载jar包\nFile file = new File("D:/com/zimug/commons-lang3.jar");\nURL url = file.toURI().toURL();\n//创建类加载器\nClassLoader classLoader = new URLClassLoader(new URL[]{url});\n\nClass cls = classLoader.loadClass("org.apache.commons.lang3.StringUtils");\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("同样的把.class文件放在一个路径下，我们也是可以动态加载到的")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//java的.class文件所在路径\nFile file = new File("D:/com/zimug");\nURL url = file.toURI().toURL();\n//创建类加载器\nClassLoader classLoader = new URLClassLoader(new URL[]{url});\n//加载指定类，package全路径\nClass<?> cls = classLoader.loadClass("com.zimug.java.reflection.Student");\n\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("类的动态加载能不能让你想到些什么？是不是可以实现代码修改，不需要重新启动容器？对的，就是这个原理，因为一个类的Class对象只有一个，所以不管你重新加载多少次，都是使用最后一次加载的class对象（上文讲过哦）。")]),s._v(" "),a("h2",{attrs:{id:"六、反射的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、反射的优缺点"}},[s._v("#")]),s._v(" 六、反射的优缺点")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("优点：自由，使用灵活，不受类的访问权限限制。可以根据指定类名、方法名来实现方法调用，非常适合实现业务的灵活配置。")])]),s._v(" "),a("li",[a("p",[s._v("缺点：")])]),s._v(" "),a("li",[a("p",[s._v("也正因为反射不受类的访问权限限制，其安全性低，很大部分的java安全问题都是反射导致的。")])]),s._v(" "),a("li",[a("p",[s._v("相对于正常的对象的访问调用，反射因为存在类和方法的实例化过程，性能也相对较低")])]),s._v(" "),a("li",[a("p",[s._v("破坏java类封装性，类的信息隐藏性和边界被破坏")])])]),s._v(" "),a("p",[a("strong",[s._v("「码文不易，如果您觉得有帮助，请帮忙点击在看或者分享，没有您的支持我可能无法坚持下去！」")]),s._v(" "),a("strong",[s._v("欢迎关注公众号：字母哥杂谈，回复003赠送作者专栏《docker修炼之道》的PDF成书版本。")]),s._v(" 字母哥博客："),a("a",{attrs:{href:"https://link.juejin.cn/?target=http%3A%2F%2Fzimug.com%2F",title:"http://zimug.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("zimug.com"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("本文转自 "),a("a",{attrs:{href:"https://juejin.cn/post/7131875593762635806",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://juejin.cn/post/7131875593762635806"),a("OutboundLink")],1),s._v("，如有侵权，请联系删除。")])])}),[],!1,null,null,null);a.default=t.exports}}]);