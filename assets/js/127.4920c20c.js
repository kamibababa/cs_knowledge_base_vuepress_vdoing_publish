(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{581:function(a,t,e){"use strict";e.r(t);var n=e(14),r=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("自从 Java 8 引入函数式编程后，给很多 Java 程序员带来了福音，函数式编程是一种专注于使用函数来创建清晰简洁的代码的范式，它不像传统的命令式编程那样修改数据和维护状态，而是将函数视为一等公民。这样就可以将它们分配给变量，作为参数传递，并从其他函数返回，这种方法可以使代码更易于理解和推理。")]),a._v(" "),t("h1",{attrs:{id:"java为什么要引入函数式编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java为什么要引入函数式编程"}},[a._v("#")]),a._v(" Java为什么要引入函数式编程？")]),a._v(" "),t("p",[a._v("近年来，函数式编程因其能够帮助管理复杂性而越来越受欢迎，尤其是在大型应用程序中，它强调不变性，避免副作用，并以更可预测和模块化的方式处理数据，这样可以更轻松地测试和维护代码。")]),a._v(" "),t("p",[a._v("Java 是一种典型的面向对象语言，为什么会在 Java 8 中引入函数式编程特性？主要原因有以下几点：")]),a._v(" "),t("ul",[t("li",[a._v("简化代码：函数式编程可以减少样板代码，使代码更简洁，从而更易于维护和更好的可读性。")]),a._v(" "),t("li",[a._v("并发性和并行性：函数式编程与现代多核架构配合良好，可实现高效的并行处理，而无需担心共享状态或副作用。")]),a._v(" "),t("li",[a._v("表现力和灵活性：通过采用函数式接口和 Lambda 表达式，Java 获得了更具表现力的语法，使我们能够编写灵活且适应性强的代码。")])]),a._v(" "),t("p",[a._v("在 Java 语言中，函数式编程主要围绕着以下几个关键概念：")]),a._v(" "),t("ul",[t("li",[a._v("Lambda 表达式：在需要提供函数接口的任何地方使用这些紧凑函数。它们有助于减少样板代码。")]),a._v(" "),t("li",[a._v("方法引用：这些是引用方法的简写方式，使代码更加简洁和可读。")]),a._v(" "),t("li",[a._v("函数接口：这些是具有单个抽象方法的接口，非常适合 Lambda 表达式和方法引用。常见示例包括 Predicate、Function、Consumer、Supplier 和 Operator。")])]),a._v(" "),t("h1",{attrs:{id:"函数式编程的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程的优缺点"}},[a._v("#")]),a._v(" 函数式编程的优缺点")]),a._v(" "),t("p",[a._v("Java 中的函数式编程给开发带来了许多便利，但同时也有缺点和挑战，下面整理了一些主要的优缺点：")]),a._v(" "),t("h2",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[a._v("#")]),a._v(" 优点")]),a._v(" "),t("h3",{attrs:{id:"提高了代码的可读性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提高了代码的可读性"}},[a._v("#")]),a._v(" 提高了代码的可读性")]),a._v(" "),t("p",[a._v("由于使用 Lambda 表达式和方法引用，函数代码往往非常简洁，从而减少了样板代码并简化了代码维护。对不可变性的关注（即数据结构在创建后保持不变）有助于减少副作用，并防止因状态意外更改而导致的错误。")]),a._v(" "),t("h3",{attrs:{id:"与并发和并行的兼容性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与并发和并行的兼容性"}},[a._v("#")]),a._v(" 与并发和并行的兼容性")]),a._v(" "),t("p",[a._v("由于函数式编程促进了不可变性，因此操作可以并行运行，而不会出现数据不一致或竞争条件的常见风险，这使得代码更适合多线程环境。")]),a._v(" "),t("h3",{attrs:{id:"模块化和可重用性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化和可重用性"}},[a._v("#")]),a._v(" 模块化和可重用性")]),a._v(" "),t("p",[a._v("函数式编程还促进了模块化和可重用性，由于函数是一等公民，我们可以创建小的、可重用的组件，从而产生更简洁、更易于维护的代码。")]),a._v(" "),t("h3",{attrs:{id:"降低了复杂性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#降低了复杂性"}},[a._v("#")]),a._v(" 降低了复杂性")]),a._v(" "),t("p",[a._v("函数式编程中的抽象降低了整体复杂性，使我们能够专注于基本逻辑，而不必担心实现细节。")]),a._v(" "),t("h2",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[a._v("#")]),a._v(" 缺点")]),a._v(" "),t("h3",{attrs:{id:"学习难度大"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#学习难度大"}},[a._v("#")]),a._v(" 学习难度大")]),a._v(" "),t("p",[a._v("函数式编程的学习曲线可能很陡峭，特别是对于习惯于面向过程或面向对象编程的人来说，由于高阶函数和不变性等概念，我们的思维方式可能要发生显著的变化。")]),a._v(" "),t("p",[a._v("由于涉及抽象，调试函数代码也可能具有挑战性，理解复杂的 Lambda 表达式可能需要更深入地了解函数概念。")]),a._v(" "),t("h3",{attrs:{id:"性能开销"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能开销"}},[a._v("#")]),a._v(" 性能开销")]),a._v(" "),t("p",[a._v("性能开销是函数式编程的另一个问题，尤其是由于函数式编程中频繁的对象创建和附加函数调用，这可能会影响资源受限环境中的性能。")]),a._v(" "),t("h3",{attrs:{id:"兼容性问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#兼容性问题"}},[a._v("#")]),a._v(" 兼容性问题")]),a._v(" "),t("p",[a._v("与旧系统或库的集成可能会出现兼容性问题，因为它们可能不是为函数式编程设计的，从而导致集成困难。")]),a._v(" "),t("h3",{attrs:{id:"灵活性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#灵活性"}},[a._v("#")]),a._v(" 灵活性")]),a._v(" "),t("p",[a._v("最后，函数式编程对不可变性和无副作用函数的关注可能会降低在需要可变性或复杂对象操作的场景中的灵活性。")]),a._v(" "),t("p",[a._v("总的来说，虽然函数式编程提供了显著的好处，如提高可读性和更容易的并发性，但它也带来了挑战，因此我们需要同时考虑这些优缺点，从而更好的把握函数式编程是否适应当前的 Java 应用程序。")]),a._v(" "),t("h1",{attrs:{id:"functionalinterface"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#functionalinterface"}},[a._v("#")]),a._v(" @FunctionalInterface")]),a._v(" "),t("p",[a._v("Java 是如何定义函数式接口的？")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("@FunctionalInterface")]),a._v(" 注解位于 "),t("code",[a._v("java.lang")]),a._v(" 包下，它是 Java 中一个特殊的标记，使接口成为函数式接口，使得它可以很好地用作 Lambda 表达式或方法引用的目标。")]),a._v(" "),t("li",[a._v("在函数式接口中，有且只能有一个抽象方法，如果在接口中添加更多的抽象方法，编译器将生成错误，从而确保函数接口的完整性。")]),a._v(" "),t("li",[a._v("函数式接口是 Java 支持函数式编程的核心，它们允许我们通过使用 Lambda 表达式、减少样板代码和促进可重用性来编写更简洁、更简洁的代码。")]),a._v(" "),t("li",[a._v("函数式接口中允许存在 "),t("code",[a._v("default")]),a._v("方法，因为它不是抽象的，这也就意味函数式接口中可以存在多个方法，但是只能有一个抽象方法。")]),a._v(" "),t("li",[t("code",[a._v("@FunctionalInterface")]),a._v(" 注解只能应用在接口上，不能应用于注解类型、枚举或类。")]),a._v(" "),t("li",[a._v("另外，有些接口尽管它没有 "),t("code",[a._v("@FunctionalInterface")]),a._v(" 注解，然而它只有一个抽象方法，因此该接口本质上也是函数式接口，因此 "),t("code",[a._v("@FunctionalInterface")]),a._v(" 注解并不是必须的，但是增加该注释是一种很优雅的行为，因为它提高了代码的可读性，强制执行约束，并帮助其他人理解我们的意图，有助于提高代码库的可维护性和一致性。")])]),a._v(" "),t("h1",{attrs:{id:"函数式接口的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式接口的使用"}},[a._v("#")]),a._v(" 函数式接口的使用")]),a._v(" "),t("p",[a._v("Java 的函数式接口有很多丰富的使用方式，这里主要从"),t("code",[a._v("自定义函数式接口")]),a._v("和"),t("code",[a._v("内建函数式接口")]),a._v("两个大方向进行分析。")]),a._v(" "),t("h2",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")]),a._v(" "),t("img",{attrs:{src:"https://yuanjava.com/images/java/lambda-types.png",alt:"img.png"}})]),a._v(" "),t("p",[a._v("从上文的讲解我们可以知道：Java 的函数式接口本质上只有一个抽象方法。因此，我们可以利用这个特征来设计一个简单的计算器示例，接收两个整数入参并返回算术运算的结果。")]),a._v(" "),t("p",[a._v("为了实现这一点，我们定义一个名为 Calculator 的函数接口，并且包含一个 operate() 抽象方法，示例代码如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("@FunctionalInterface\ninterface Calculator {\n    int operate(int a, int b);\n}\n")])])]),t("p",[a._v("在上述示例中，Calculator 接口增加了 "),t("code",[a._v("@FunctionalInterface")]),a._v("注解，它清晰地表明 Calculator 是函数式接口，强调它应该只包含一个抽象方法 operate()。")]),a._v(" "),t("p",[a._v("operate() 方法 ，它接受两个整数入参并返回一个整数结果，通过这个函数接口，我们可以使用 Lambda 表达式创建不同的算术运算，比如加法、减法、乘法和除法，示例代码如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("@Test\nvoid operateTest() {\n    // 使用 Lambda 定义操作\n    Calculator add = (a, b) -> a + b;      // 加法\n    Calculator subtract = (a, b) -> a - b; // 减法\n    Calculator multiply = (a, b) -> a * b; // 乘法\n    Calculator divide = (a, b) -> a / b;   // 除法\n    // 验证结果\n    assertEquals(15, add.operate(10, 5));\n    assertEquals(5, subtract.operate(10, 5));\n    assertEquals(50, multiply.operate(10, 5));\n    assertEquals(2, divide.operate(10, 5));\n}\n")])])]),t("p",[a._v("在 operateTest 这个测试方法中，我们首先使用 Calculator 为加减乘除 4个运算定义了 Lambda 表达式，然后使用断言来验证 "),t("code",[a._v("operate()")]),a._v(" 方法的算术运算结果与预期值是否匹配。")]),a._v(" "),t("p",[a._v("通过这个示例，我们可以使用自定义函数式接口很灵活的定义 Lambda表达式，实现函数式编程。")]),a._v(" "),t("h2",{attrs:{id:"java内建函数式接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java内建函数式接口"}},[a._v("#")]),a._v(" Java内建函数式接口")]),a._v(" "),t("p",[a._v("从 Java 8 开始， 在 "),t("code",[a._v("java.util.function")]),a._v(" 包里面提供了很多内置的函数接口，下面列举了几个最常见的内置函数式接口以及它们的典型用例和代码示例：")]),a._v(" "),t("h3",{attrs:{id:"predicate-t"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#predicate-t"}},[a._v("#")]),a._v(" "),t("code",[a._v("Predicate<T>")])]),a._v(" "),t("p",[t("code",[a._v("Predicate<T>")]),a._v(" 表示接受 T 类型的输入并返回布尔值的函数，通常用于筛选和条件检查。源码如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("@FunctionalInterface\npublic interface Predicate<T> {\n  /**\n   * Evaluates this predicate on the given argument.\n   *\n   * @param t the input argument\n   * @return {@code true} if the input argument matches the predicate,\n   * otherwise {@code false}\n   */\n    boolean test(T t);\n    \n    // default methods\n}\n")])])]),t("p",[a._v("使用举例：")]),a._v(" "),t("ul",[t("li",[a._v("检查数字是否为偶数")]),a._v(" "),t("li",[a._v("根据长度筛选字符串列表")]),a._v(" "),t("li",[a._v("验证用户输入")])]),a._v(" "),t("p",[a._v("如下代码，"),t("code",[a._v("Predicate<Integer>")]),a._v(" 被定义为 isEven，它检查一个数是否是偶数。然后，我们使用 filter 方法和 isEven 谓词来筛选出偶数，并将结果收集到一个新的列表中。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('import java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\npublic class PredicateExample {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        Predicate<Integer> isEven = n -> n % 2 == 0;\n        List<Integer> evenNumbers = numbers.stream().filter(isEven).collect(Collectors.toList());\n        System.out.println("Even numbers: " + evenNumbers);\n    }\n}\n')])])]),t("h3",{attrs:{id:"function-t-r"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-t-r"}},[a._v("#")]),a._v(" "),t("code",[a._v("Function<T, R>")])]),a._v(" "),t("p",[t("code",[a._v("Function<T, R>")]),a._v(" 表示函数接受 T 类型的输入并返回 R 类型的结果，通常用于转换或映射操作。源码如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("@FunctionalInterface\npublic interface Function<T, R> {\n  /**\n   * Applies this function to the given argument.\n   *\n   * @param t the function argument\n   * @return the function result\n   */ \n  R apply(T t);\n  \n  // default methods\n}\n")])])]),t("p",[a._v("使用举例：")]),a._v(" "),t("ul",[t("li",[a._v("将字符串转换为大写")]),a._v(" "),t("li",[a._v("将员工对象映射到其工资")]),a._v(" "),t("li",[a._v("将字符串解析为整数")])]),a._v(" "),t("p",[a._v("如下代码，"),t("code",[a._v("Function<Integer, Integer>")]),a._v(" 被定义为 square，它计算一个整数的平方。我们使用 map 方法和 square 函数将所有整数转换为它们的平方，并将结果收集到一个新的列表中。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('import java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class FunctionExample {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        Function<Integer, Integer> square = n -> n * n;\n        List<Integer> squares = numbers.stream().map(square).collect(Collectors.toList());\n        System.out.println("Squares: " + squares);\n    }\n}\n')])])]),t("h3",{attrs:{id:"consumer-t"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#consumer-t"}},[a._v("#")]),a._v(" "),t("code",[a._v("Consumer<T>")])]),a._v(" "),t("p",[t("code",[a._v("Consumer<T>")]),a._v(" 表示接受 T 类型的输入并执行操作而不返回结果的函数，非常适合打印或记录等副作用操作。源码如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("@FunctionalInterface\npublic interface Consumer<T> {\n  /**\n   * Performs this operation on the given argument.\n   * @param t the input argument\n   */\n    void accept(T t);\n    \n    // default methods\n}\n")])])]),t("p",[a._v("使用举例：")]),a._v(" "),t("ul",[t("li",[a._v("记录用户操作")]),a._v(" "),t("li",[a._v("打印数字列表")]),a._v(" "),t("li",[a._v("更新对象属性")])]),a._v(" "),t("p",[a._v("如下代码，"),t("code",[a._v("Consumer<String>")]),a._v(" 被定义为 printName，它打印一个字符串。然后，我们使用 forEach 方法和 printName 消费者对列表中的每个字符串进行打印。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('import java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Consumer;\n\npublic class ConsumerExample {\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList("Tom", "Bob", "Cherry");\n        Consumer<String> printName = name -> System.out.println(name);\n        names.forEach(printName);\n    }\n}\n')])])]),t("h3",{attrs:{id:"supplier-t"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#supplier-t"}},[a._v("#")]),a._v(" "),t("code",[a._v("Supplier<T>")])]),a._v(" "),t("p",[t("code",[a._v("Supplier<T>")]),a._v(" 表示该函数提供 T 类型的值而不采用任何参数，对于延迟初始化和延迟计算很有用。源码如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("@FunctionalInterface\npublic interface Supplier<T> {\n  /**\n   * Gets a result.\n   * @return a result\n   */\n  T get();\n  \n  // default methods\n}\n")])])]),t("p",[a._v("使用举例：")]),a._v(" "),t("ul",[t("li",[a._v("创建新的对象实例")]),a._v(" "),t("li",[a._v("生成随机数")]),a._v(" "),t("li",[a._v("提供默认值")])]),a._v(" "),t("p",[a._v("如下代码，"),t("code",[a._v("Supplier<Double>")]),a._v(" 被定义为 randomSupplier，它返回一个随机数，我们使用 get 方法来调用供应商并获取随机数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('import java.util.function.Supplier;\nimport java.util.Random;\n\npublic class SupplierExample {\n    public static void main(String[] args) {\n        Supplier<Double> randomSupplier = () -> new Random().nextDouble();\n\n        System.out.println("Random number: " + randomSupplier.get());\n        System.out.println("Random number: " + randomSupplier.get());\n    }\n}\n')])])]),t("h3",{attrs:{id:"bifunction-t-t-t"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bifunction-t-t-t"}},[a._v("#")]),a._v(" "),t("code",[a._v("BiFunction<T,T,T>")])]),a._v(" "),t("p",[t("code",[a._v("BinaryOperator<T, T, T>")]),a._v("，表示该函数接受两个 T 类型的输入并返回相同类型的结果，可用于组合或减少操作。源码如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("@FunctionalInterface\npublic interface BiFunction<T, U, R> {\n\n    /**\n     * Applies this function to the given arguments.\n     *\n     * @param t the first function argument\n     * @param u the second function argument\n     * @return the function result\n     */\n    R apply(T t, U u);\n  // default methods\n}\n@FunctionalInterface\npublic interface BinaryOperator<T> extends BiFunction<T,T,T> {\n    \n}\n")])])]),t("p",[a._v("使用举例：")]),a._v(" "),t("ul",[t("li",[a._v("求两个值的最大值")]),a._v(" "),t("li",[a._v("将两个数字相加")]),a._v(" "),t("li",[a._v("连接字符串")])]),a._v(" "),t("p",[a._v("如下代码，"),t("code",[a._v("BinaryOperator<Integer>")]),a._v(" 被定义为将两个整数相加。我们使用 apply() 方法来调用操作符并获取结果。源码如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('import java.util.function.BinaryOperator;\n\npublic class BinaryOperatorExample {\n    public static void main(String[] args) {\n        BinaryOperator<Integer> add = (a, b) -> a + b;\n\n        int result = add.apply(3, 5);\n        System.out.println("Result: " + result); // 输出: Result: 8\n    }\n}\n')])])]),t("p",[a._v("Java 8 中的这些内置函数接口为函数式编程奠定了基础，使我们能够使用 Lambda 表达式并简化代码。由于它们的多功能性，我们可以将它们用于广泛的应用，从数据转换到过滤等等。")]),a._v(" "),t("h1",{attrs:{id:"lambda-表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lambda-表达式"}},[a._v("#")]),a._v(" Lambda 表达式")]),a._v(" "),t("h2",{attrs:{id:"解释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解释"}},[a._v("#")]),a._v(" 解释")]),a._v(" "),t("p",[a._v("Lambda 表达式是 Java 8 的一个关键特性，它允许我们以清晰简洁的方式创建紧凑的匿名函数，提供了一种以更简单的形式表示函数式接口的方法，因此，Lambda 表达式是 Java 函数式编程的基石。")]),a._v(" "),t("p",[a._v("Lambda 表达式的一般语法如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("() -> {}\n")])])]),t("p",[a._v("Lambda 包含三个部分：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("()")]),a._v(" 代表入参，表示 Lambda 函数的输入参数，多个参数用逗号分隔，如果只有一个参数，括号可以省略；")]),a._v(" "),t("li",[t("code",[a._v("->")]),a._v(" 代表箭头运算符，它将参数与 Lambda 表达式的主体分开；")]),a._v(" "),t("li",[t("code",[a._v("{}")]),a._v(" 代表主体，它包含函数逻辑，如果只有一条语句，大括号可以省略；")])]),a._v(" "),t("p",[a._v("主体只有一条语句的 Lambda 表达式示例：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("Function<String, String> toUpper = s -> s == null ? null : s.toUpperCase();\n")])])]),t("p",[a._v("上述示例中，因为只有一个参数，所以 "),t("code",[a._v("()")]),a._v(" 被省略了，因为主体只有一语句，所以 "),t("code",[a._v("{}")]),a._v(" 被省略了。")]),a._v(" "),t("p",[a._v("主体包含多条语句的 Lambda 表达式示例：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("IntToLongFunction factorial =\n    n -> {\n      long result = 0L;\n      for (int i = 0; i <= n; i++) {\n        result += i;\n      }\n      return result;\n    };\n")])])]),t("p",[a._v("上述示例中，因为只有一个参数，所以 "),t("code",[a._v("()")]),a._v(" 被省略了，因为主体包含多条语句，所以 "),t("code",[a._v("{}")]),a._v(" 不能被省略。")]),a._v(" "),t("p",[a._v("上述两个示例，使用 Lambda 表达式来创建匿名函数，这使得我们能够编写内联逻辑，而无需额外的类定义。我们可以在需要我们传递函数接口的地方使用这种匿名函数。")])])}),[],!1,null,null,null);t.default=r.exports}}]);