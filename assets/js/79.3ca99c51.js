(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{524:function(n,s,e){"use strict";e.r(s);var a=e(14),t=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"typescript-断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-断言"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("TypeScript 断言")]),n._v(" "),s("h3",{attrs:{id:"_1-类型断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-类型断言"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("1. 类型断言")]),n._v(" "),s("p",[n._v("有时候会遇到这样的情况，开发者比 TypeScript 更了解某个值的详细信息。通常这会发生在开发者清楚地知道一个实体具有比它现有类型更确切的类型。"),s("br"),n._v("\n通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在"),s("strong",[n._v("编译阶段起作用")]),n._v("。"),s("br"),n._v("\n类型断言有两种形式：")]),n._v(" "),s("h4",{attrs:{id:"_1-尖括号-语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-尖括号-语法"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("1.“尖括号” 语法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('let someValue: any = "this is a string";\nlet strLength: number = (<string>someValue).length;\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("h4",{attrs:{id:"_2-as-语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-as-语法"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("2. as 语法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('let someValue: any = "this is a string";\nlet strLength: number = (someValue as string).length;\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("blockquote",[s("p",[n._v("以上两种方式虽然没有任何区别，但是尖括号格式会与 react 中 JSX 产生语法冲突，因此我们更推荐使用 as 语法。")])]),n._v(" "),s("h3",{attrs:{id:"_2-非空断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-非空断言"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("2. 非空断言")]),n._v(" "),s("p",[n._v("在上下文中，当类型检查器无法断定类型时，一个新的后缀表达式操作符 ! 可以用于"),s("strong",[n._v("断言操作对象是非 null 和非 undefined 类型")]),n._v("。"),s("strong",[n._v("具体而言，x! 将从 x 值域中排除 null 和 undefined 。")]),s("br"),n._v("\n那么非空断言操作符到底有什么用呢？下面是非空断言操作符的一些使用场景。")]),n._v(" "),s("h4",{attrs:{id:"_1-忽略-undefined-和-null-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-忽略-undefined-和-null-类型"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("1. 忽略 undefined 和 null 类型")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function myFunc(maybeString: string | undefined | null) {\n  // Type 'string | null | undefined' is not assignable to type 'string'.\n  // Type 'undefined' is not assignable to type 'string'. \n  const onlyString: string = maybeString; // Error\n  const ignoreUndefinedAndNull: string = maybeString!; // Ok\n}\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("h4",{attrs:{id:"_2-调用函数时忽略-undefined-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-调用函数时忽略-undefined-类型"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("2. 调用函数时忽略 undefined 类型")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("type NumGenerator = () => number;\n\nfunction myFunc(numGenerator: NumGenerator | undefined) {\n  // Object is possibly 'undefined'.(2532)\n  // Cannot invoke an object which is possibly 'undefined'.(2722)\n  const num1 = numGenerator(); // Error\n  const num2 = numGenerator!(); //OK\n}\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("因为 ! 非空断言操作符会从编译生成的 JavaScript 代码中移除，所以在实际使用的过程中，要特别注意。比如下面这个例子：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const a: number | undefined = undefined;\nconst b: number = a!;\nconsole.log(b); \n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("以上 TS 代码会编译生成以下 ES5 代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('"use strict";\nconst a = undefined;\nconst b = a;\nconsole.log(b);\n\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("虽然在 TS 代码中，我们使用了非空断言，使得 const b: number = a!; 语句可以通过 TypeScript 类型检查器的检查。但在生成的 ES5 代码中，! 非空断言操作符被移除了，所以在浏览器中执行以上代码，在控制台会输出 undefined。")]),n._v(" "),s("h3",{attrs:{id:"_3-确定赋值断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-确定赋值断言"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("3. 确定赋值断言")]),n._v(" "),s("p",[n._v("在 TypeScript 2.7 版本中引入了确定赋值断言，即允许在实例属性和变量声明后面放置一个 ! 号，从而告诉 TypeScript 该属性会被明确地赋值。为了更好地理解它的作用，我们来看个具体的例子：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let x: number;\ninitialize();\n// Variable 'x' is used before being assigned.(2454)\nconsole.log(2 * x); // Error\n\nfunction initialize() {\n  x = 10;\n}\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("很明显该异常信息是说变量 x 在赋值前被使用了，要解决该问题，我们可以使用确定赋值断言：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let x!: number;\ninitialize();\nconsole.log(2 * x); // Ok\n\nfunction initialize() {\n  x = 10;\n}\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("通过 let x!: number; 确定赋值断言，TypeScript 编译器就会知道该属性会被明确地赋值。")]),n._v(" "),s("h2",{attrs:{id:"typescript-类型守卫"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-类型守卫"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("TypeScript 类型守卫")]),n._v(" "),s("p",[s("strong",[n._v("类型保护是可执行运行时检查的一种表达式，用于确保该类型在一定的范围内。")]),s("br"),n._v("\n换句话说，类型保护可以保证一个字符串是一个字符串，尽管它的值也可以是一个数值。类型保护与特性检测并不是完全不同，其主要思想是尝试检测属性、方法或原型，以确定如何处理值。目前主要有四种的方式来实现类型保护：")]),n._v(" "),s("h3",{attrs:{id:"_4-1-in-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-in-关键字"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("4.1 in 关键字")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('interface Admin {\n  name: string;\n  privileges: string[];\n}\n\ninterface Employee {\n  name: string;\n  startDate: Date;\n}\n\ntype UnknownEmployee = Employee | Admin;\n\nfunction printEmployeeInformation(emp: UnknownEmployee) {\n  console.log("Name: " + emp.name);\n  if ("privileges" in emp) {\n    console.log("Privileges: " + emp.privileges);\n  }\n  if ("startDate" in emp) {\n    console.log("Start Date: " + emp.startDate);\n  }\n}\n\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br")])]),s("h3",{attrs:{id:"_4-2-typeof-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-typeof-关键字"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("4.2 typeof 关键字")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('function padLeft(value: string, padding: string | number) {\n  if (typeof padding === "number") {\n      return Array(padding + 1).join(" ") + value;\n  }\n  if (typeof padding === "string") {\n      return padding + value;\n  }\n  throw new Error(`Expected string or number, got \'${padding}\'.`);\n}\n\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("typeof 类型保护只支持两种形式：typeof v === “typename” 和 typeof v !== typename，“typename” 必须是 “number”， “string”， “boolean” 或 “symbol”。 但是 TypeScript 并不会阻止你与其它字符串比较，语言不会把那些表达式识别为类型保护。")]),n._v(" "),s("h3",{attrs:{id:"_4-3-instanceof-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-instanceof-关键字"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("4.3 instanceof 关键字")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("interface Padder {\n  getPaddingString(): string;\n}\n\nclass SpaceRepeatingPadder implements Padder {\n  constructor(private numSpaces: number) {}\n  getPaddingString() {\n    return Array(this.numSpaces + 1).join(\" \");\n  }\n}\n\nclass StringPadder implements Padder {\n  constructor(private value: string) {}\n  getPaddingString() {\n    return this.value;\n  }\n}\n\nlet padder: Padder = new SpaceRepeatingPadder(6);\n\nif (padder instanceof SpaceRepeatingPadder) {\n  // padder的类型收窄为 'SpaceRepeatingPadder'\n}\n\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("h4",{attrs:{id:"_4-4-自定义类型保护的类型谓词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-自定义类型保护的类型谓词"}},[n._v("#")]),n._v(" "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1),n._v("4.4 自定义类型保护的类型谓词")]),n._v(" "),s("p",[n._v("通过 type is xxx 这样的类型谓词来进行类型保护")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('function isNumber(x: any): x is number {\n  return typeof x === "number";\n}\n\nfunction isString(x: any): x is string {\n  return typeof x === "string";\n}\n\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("p",[n._v("本文转自 "),s("a",{attrs:{href:"https://blog.csdn.net/m0_49424368/article/details/124299552",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://blog.csdn.net/m0_49424368/article/details/124299552"),s("OutboundLink")],1),n._v("，如有侵权，请联系删除。")])])}),[],!1,null,null,null);s.default=t.exports}}]);