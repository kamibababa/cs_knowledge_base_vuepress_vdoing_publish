(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{512:function(a,s,e){"use strict";e.r(s);var n=e(14),r=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("在 JavaScript 中，"),s("code",[a._v("reduce()")]),a._v(' 是数组的一个高阶方法，它用于通过一个累加器（或称作 "reducer"）对数组中的每个元素进行操作，并最终将其归约为一个单一的值。这个方法常用于求和、求平均数、扁平化数组、计数频率等操作。')]),a._v(" "),s("h3",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("javascript\n\n\n复制代码\narray.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h4",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[a._v("#")]),a._v(" 参数：")]),a._v(" "),s("ol",[s("li",[s("strong",[s("code",[a._v("callback")])]),a._v(": 一个函数，它包含四个参数：\n"),s("ul",[s("li",[s("strong",[s("code",[a._v("accumulator")])]),a._v("：累加器，累计回调函数的返回值。")]),a._v(" "),s("li",[s("strong",[s("code",[a._v("currentValue")])]),a._v("：当前数组中正在处理的元素。")]),a._v(" "),s("li",[s("strong",[s("code",[a._v("index")])]),a._v("（可选）：当前元素的索引。")]),a._v(" "),s("li",[s("strong",[s("code",[a._v("array")])]),a._v("（可选）：调用 "),s("code",[a._v("reduce()")]),a._v(" 的数组本身。")])])]),a._v(" "),s("li",[s("strong",[s("code",[a._v("initialValue")])]),a._v("（可选）：提供给累加器的初始值。如果没有提供，则默认为数组的第一个元素。")])]),a._v(" "),s("h4",{attrs:{id:"返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[a._v("#")]),a._v(" 返回值：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("reduce()")]),a._v(" 返回最终的累计值，也就是对整个数组应用了回调函数后的最终结果。")])]),a._v(" "),s("h3",{attrs:{id:"示例-1-数组求和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例-1-数组求和"}},[a._v("#")]),a._v(" 示例 1：数组求和")]),a._v(" "),s("p",[a._v("假设我们要计算一个数组中所有数字的总和：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("javascript复制代码const numbers = [1, 2, 3, 4, 5];\n\nconst sum = numbers.reduce((accumulator, currentValue) => {\n  return accumulator + currentValue;\n}, 0);  // 0 是初始值\n\nconsole.log(sum);  // 输出: 15\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h3",{attrs:{id:"解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释"}},[a._v("#")]),a._v(" 解释：")]),a._v(" "),s("ul",[s("li",[a._v("初始值是 "),s("code",[a._v("0")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("reduce()")]),a._v(" 从数组的第一个元素开始，将 "),s("code",[a._v("accumulator")]),a._v(" 累加上 "),s("code",[a._v("currentValue")]),a._v("，最终返回总和。")])]),a._v(" "),s("h3",{attrs:{id:"示例-2-数组扁平化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例-2-数组扁平化"}},[a._v("#")]),a._v(" 示例 2：数组扁平化")]),a._v(" "),s("p",[a._v("假设我们有一个包含嵌套数组的数组，我们想要将它们扁平化为一个单一的数组：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("javascript复制代码const nestedArrays = [[1, 2], [3, 4], [5, 6]];\n\nconst flattened = nestedArrays.reduce((accumulator, currentValue) => {\n  return accumulator.concat(currentValue);\n}, []);  // 初始值是空数组\n\nconsole.log(flattened);  // 输出: [1, 2, 3, 4, 5, 6]\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h3",{attrs:{id:"解释-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释-2"}},[a._v("#")]),a._v(" 解释：")]),a._v(" "),s("ul",[s("li",[a._v("初始值是 "),s("code",[a._v("[]")]),a._v("（空数组）。")]),a._v(" "),s("li",[s("code",[a._v("reduce()")]),a._v(" 遍历每个子数组，并通过 "),s("code",[a._v("concat()")]),a._v(" 将其合并到 "),s("code",[a._v("accumulator")]),a._v(" 中，最终得到扁平化后的数组。")])]),a._v(" "),s("h3",{attrs:{id:"示例-3-对象计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例-3-对象计数"}},[a._v("#")]),a._v(" 示例 3：对象计数")]),a._v(" "),s("p",[a._v("假设我们有一个数组，里面包含一些重复的元素，我们想要统计每个元素出现的次数：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("javascript复制代码const fruits = ['apple', 'banana', 'apple', 'orange', 'banana', 'banana'];\n\nconst count = fruits.reduce((accumulator, currentValue) => {\n  if (accumulator[currentValue]) {\n    accumulator[currentValue]++;\n  } else {\n    accumulator[currentValue] = 1;\n  }\n  return accumulator;\n}, {});  // 初始值是一个空对象\n\nconsole.log(count);  \n// 输出: { apple: 2, banana: 3, orange: 1 }\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("h3",{attrs:{id:"解释-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释-3"}},[a._v("#")]),a._v(" 解释：")]),a._v(" "),s("ul",[s("li",[a._v("初始值是一个空对象 "),s("code",[a._v("{}")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("reduce()")]),a._v(" 遍历数组中的每个元素，如果该元素已经在对象中，则增加计数；否则，将该元素作为键并初始化计数为 "),s("code",[a._v("1")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"示例-4-使用-reduce-处理多个操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例-4-使用-reduce-处理多个操作"}},[a._v("#")]),a._v(" 示例 4：使用 "),s("code",[a._v("reduce()")]),a._v(" 处理多个操作")]),a._v(" "),s("p",[a._v("你可以在 "),s("code",[a._v("reduce()")]),a._v(" 中执行多个操作。比如，处理一个数组，找出最大值和最小值：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("javascript复制代码const numbers = [4, 5, 7, 2, 9, 1];\n\nconst result = numbers.reduce((accumulator, currentValue) => {\n  accumulator.max = Math.max(accumulator.max, currentValue);\n  accumulator.min = Math.min(accumulator.min, currentValue);\n  return accumulator;\n}, { max: -Infinity, min: Infinity });  // 初始值包含 max 和 min\n\nconsole.log(result);  \n// 输出: { max: 9, min: 1 }\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("h3",{attrs:{id:"解释-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释-4"}},[a._v("#")]),a._v(" 解释：")]),a._v(" "),s("ul",[s("li",[a._v("初始值是一个对象 "),s("code",[a._v("{ max: -Infinity, min: Infinity }")]),a._v("，确保在比较过程中能够正确找到最大值和最小值。")]),a._v(" "),s("li",[s("code",[a._v("reduce()")]),a._v(" 遍历每个元素并更新 "),s("code",[a._v("accumulator")]),a._v(" 中的 "),s("code",[a._v("max")]),a._v(" 和 "),s("code",[a._v("min")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"示例-5-没有提供-initialvalue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例-5-没有提供-initialvalue"}},[a._v("#")]),a._v(" 示例 5：没有提供 "),s("code",[a._v("initialValue")])]),a._v(" "),s("p",[a._v("如果没有提供 "),s("code",[a._v("initialValue")]),a._v("，"),s("code",[a._v("reduce()")]),a._v(" 会使用数组的第一个元素作为初始值，并从第二个元素开始处理：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("javascript复制代码const numbers = [1, 2, 3, 4, 5];\n\nconst sum = numbers.reduce((accumulator, currentValue) => {\n  return accumulator + currentValue;\n});\n\nconsole.log(sum);  // 输出: 15\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h3",{attrs:{id:"注意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[a._v("#")]),a._v(" 注意：")]),a._v(" "),s("ul",[s("li",[a._v("如果你没有提供 "),s("code",[a._v("initialValue")]),a._v("，那么 "),s("code",[a._v("reduce()")]),a._v(" 会从数组的第二个元素开始执行回调函数，"),s("code",[a._v("accumulator")]),a._v(" 初始值是数组的第一个元素。")]),a._v(" "),s("li",[a._v("如果数组为空，且没有提供 "),s("code",[a._v("initialValue")]),a._v("，"),s("code",[a._v("reduce()")]),a._v(" 会抛出 "),s("code",[a._v("TypeError")]),a._v(" 错误。")])]),a._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("reduce()")]),a._v(" 是一个非常强大的数组方法，可以对数组进行累积、合并、计数、排序、映射等各种操作。")]),a._v(" "),s("li",[a._v("提供 "),s("code",[a._v("initialValue")]),a._v(" 可以帮助确保回调函数从你预期的初始状态开始处理数据。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);